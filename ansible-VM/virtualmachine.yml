- name: Create Azure VM
  hosts: localhost
  connection: local
  vars_files:
    - vars/variables.yml
  tasks:
  - name: Create resource group
    azure_rm_resourcegroup:
      name: "{{ resource_group }}"
      location: "{{ resource_group_location }}"
    register: resource

  - name: Create virtual network
    azure_rm_virtualnetwork:
      resource_group: "{{ resource_group }}"
      name: "{{ vnet_name }}"
      address_prefixes: "{{ vnet_address_prefixes }}"
    register: virtual_network

  - name: Create public IP address
    azure_rm_publicipaddress:
      resource_group: "{{ resource_group }}"
      allocation_method: Static
      name: "{{ item.publicipname }}"
    with_items:
      - { publicipname: masterPublicIP }
      - { publicipname: node1PublicIP }
      - { publicipname: node2PublicIP }
    register: output_ip_address

  - name: Sleep for 100 seconds while creating the public ip(s)_address
    wait_for:
      timeout: 100
    delegate_to: localhost
    when: output_ip_address is changed

  - name: Dump public IP for VM which will be created
    ansible.builtin.debug:
      msg: The public IP of your VM is "{{ item }}"
 #     msg: "The public IP of your VM is {{ item.state.ip_address }}"
    with_items: 
    - '{{ output_ip_address.results[0].state.ip_address }}'
    - '{{ output_ip_address.results[1].state.ip_address }}'
    - '{{ output_ip_address.results[2].state.ip_address }}'

  - name: Create Network Security Group that allows SSH from your provider public IP
    azure_rm_securitygroup:
      resource_group: "{{ resource_group }}"
      name: "{{ network_security_group_name }}"
      rules:
        - name: SSH
          protocol: Tcp
          destination_port_range: 22
          source_port_range: "*"
          access: Allow
          priority: 1001
          direction: Inbound
          source_address_prefix: "{{ network_provider_public_ip }}"
          destination_address_prefix: "{{ subnet_address_prefixes }}"
          description: "Allow from MY ISP IP"

  - name: Add subnet to the virtual network
    azure_rm_subnet:
      resource_group: "{{ resource_group }}"
      name: "{{ subnet_name }}"
      address_prefix: "{{ subnet_address_prefixes }}"
      virtual_network: "{{ vnet_name }}"
      security_group:
        name: "{{ network_security_group_name }}"
    register: subnet_network

  - name: Create virtual network interface card
    azure_rm_networkinterface:
      resource_group: "{{ resource_group }}"
      name: "{{ item.nicname }}"
      virtual_network: "{{ vnet_name }}"
      subnet: "{{ subnet_name }}"
      public_ip_name: "{{ item.publicipname }}"
      security_group: "{{ network_security_group_name }}"
    with_items:
      - { nicname: Masternic, publicipname: masterPublicIP }
      - { nicname: Node1nic, publicipname: node1PublicIP }
      - { nicname: Node2nic, publicipname: node2PublicIP }
    register: nic_card

#  - name: List all VM's from publisher available in that region
#    community.azure.azure_rm_virtualmachineimage_info:
#      location: "{{ resource_group_location }}"
#      publisher: "{{ vm_publisher }}"
#    register: list_vm

  - name: Create VM
    azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ item.name }}"
      tags: "{{ vm_tags }}"
      vm_size: "{{ vm_size }}"
      admin_username: "{{ vm_admin_username }}"
      short_hostname: "{{ item.vm_hostname }}"
      ssh_password_enabled: false
      os_disk_size_gb: "{{ item.vmdisksize }}"
      managed_disk_type: "{{ item.vmdiskmanagedtype }}"
      os_disk_name: "{{ item.vmdiskname }}"
      ssh_public_keys:
        - path: "{{ ssh_keys_path_dest }}"
          key_data: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      network_interfaces: "{{ item.nicname }}"
      image:
        offer: "{{ vm_offer }}"
        publisher: "{{ vm_publisher }}"
        sku: "{{ vm_sku }}"
        version: "{{ vm_version }}"
    with_items:
      - { name: master, vmdiskname: master_disk, vm_hostname: master-01, nicname: Masternic, vmdisksize: 40, vmdiskmanagedtype: StandardSSD_LRS }
      - { name: node-01, vmdiskname: node1_disk, vm_hostname: worker-02, nicname: Node1nic, vmdisksize: 40, vmdiskmanagedtype: StandardSSD_LRS }
      - { name: node-02, vmdiskname: node2_disk, vm_hostname: worker-03, nicname: Node2nic, vmdisksize: 40, vmdiskmanagedtype: StandardSSD_LRS }
    register: vms

 # - name: Copy to VM docker script install
 #   vars:
 #     vm_private_key: "{{ lookup('file', '~/.ssh/id_rsa') }}"
 #   command: "scp -o StrictHostKeyChecking=no -i {{ vm_private_key }} docker-ce-setup.sh {{ vm_admin_username }}@{{ item[0] }}:/home/{{ vm_admin_username }}/docker-setup.sh"
 #   with_items: 
 #   - '{{ output_ip_address.results[0].state.ip_address }}'
 #   - '{{ output_ip_address.results[1].state.ip_address }}'
 #   register: vms_docker_ce_setup
  - name: Dump public IP and Hostname for VM which will be created
    ansible.builtin.debug:
      msg: The public IP and Name of your VM is "{{ item }}"
    with_items: 
    - 'IpAddress: {{ output_ip_address.results[0].state.ip_address }} Hostname: {{ vms.results[0].ansible_facts.azure_vm.name }}'
    - 'IpAddress: {{ output_ip_address.results[1].state.ip_address }} Hostname: {{ vms.results[1].ansible_facts.azure_vm.name }}'
    - 'IpAddress: {{ output_ip_address.results[2].state.ip_address }} Hostname: {{ vms.results[2].ansible_facts.azure_vm.name }}'
    tags:
      - dump
